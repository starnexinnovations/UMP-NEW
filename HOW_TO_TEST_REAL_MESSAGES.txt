================================================================================
                      HOW TO TEST REAL MESSAGES GUIDE
                Complete Guide for Bidirectional Messaging
================================================================================

================================================================================
WHAT'S BEEN FIXED - MAJOR CHANGES
================================================================================

✅ Messages are now loaded from MongoDB database (not dummy data)
✅ Real-time chat interface like WhatsApp/Telegram
✅ Shows both sent and received messages
✅ Auto-refresh every 10 seconds
✅ Manual refresh button for each platform
✅ Proper chat bubbles (received = left, sent = right)
✅ Timestamps for each message
✅ Empty state when no messages
✅ Webhook handlers improved to save incoming messages

================================================================================
HOW THE SYSTEM WORKS NOW
================================================================================

SENDING MESSAGES (You → Platform):
1. Type message in messages.html
2. Click Send
3. Frontend calls /api/send/telegram (or whatsapp, etc.)
4. Backend sends message via platform API
5. Message saved to MongoDB with sender_name = "You"
6. Chat refreshes and shows your sent message (blue bubble on right)

RECEIVING MESSAGES (Platform → You):
1. Someone sends you a message on Telegram/WhatsApp
2. Platform calls your webhook (/webhook/telegram)
3. Webhook parses the message
4. Saves to MongoDB with actual sender name
5. Next refresh, message appears (white bubble on left)

================================================================================
STEP-BY-STEP TESTING GUIDE
================================================================================

STEP 1: Start Everything
-------------------------
1. Make sure MongoDB is running:
   mongosh (should connect)

2. Start your server:
   npm start

3. You should see:
   ✅ MongoDB Connected
   🚀 Server running at: http://localhost:5000

STEP 2: Login
-------------
1. Go to http://localhost:5000/login.html
2. Login with your verified account
3. Make sure you see "Login Successful"
4. You'll be redirected to dashboard

STEP 3: Select Telegram
------------------------
1. Go to platform selection page or:
   Open browser console (F12)
   Type: localStorage.setItem('selectedPlatforms', '["telegram"]')
   Refresh page

2. Go to http://localhost:5000/messages.html

STEP 4: View Messages
---------------------
You should now see:
- Telegram section with logo and header
- "Loading messages..." initially
- Then either:
  * "No messages yet" if database is empty
  * OR actual messages from database

STEP 5: Send a Test Message FROM Your Interface
------------------------------------------------
1. In the Telegram section, type: "Hello from web!"
2. Click Send
3. You should see:
   - Button shows "Sending..."
   - Green notification: "Message sent via telegram!"
   - Message appears as blue bubble on right
   - Message is saved to MongoDB

4. This message will be sent to your Telegram bot
5. Check your Telegram bot - you should receive the message

STEP 6: Send a Test Message TO Your Interface (Incoming)
---------------------------------------------------------
1. Open Telegram app on your phone
2. Find your bot
3. Send a message: "Hello from Telegram!"

4. For this to work, you need webhook set up:
   - Your server must be public (use ngrok for testing)
   - Webhook must be configured to point to your server

5. Check server terminal, you should see:
   Telegram webhook received: {message data...}
   Telegram message saved: {saved document...}

6. Go back to messages.html
7. Click the "↻ Refresh" button OR wait 10 seconds
8. You should see the incoming message as white bubble on left

================================================================================
UNDERSTANDING THE CHAT INTERFACE
================================================================================

Chat Layout:
┌──────────────────────────────────────┐
│ Telegram          [↻ Refresh button] │
├──────────────────────────────────────┤
│                                       │
│  ┌──────────────┐                   │  ← Received message
│  │ John         │                    │     (white, left side)
│  │ Hello!       │                    │
│  │ 2:30 PM      │                    │
│  └──────────────┘                    │
│                                       │
│                   ┌──────────────┐   │  ← Sent message
│                   │ Test message │   │     (blue, right side)
│                   │ 2:35 PM      │   │
│                   └──────────────┘   │
│                                       │
├──────────────────────────────────────┤
│ [Type your message...] [Send button] │
└──────────────────────────────────────┘

Features:
- Auto-scrolls to bottom when new messages arrive
- Shows sender name for received messages
- Shows relative time (Just now, 5m ago, 2:30 PM, etc.)
- Refresh button manually updates messages
- Auto-refresh every 10 seconds in background

================================================================================
TELEGRAM TESTING - DETAILED INSTRUCTIONS
================================================================================

PART A: Setup Telegram Bot
---------------------------
1. Open Telegram, search @BotFather
2. Send: /newbot
3. Choose name: "UMP Test Bot"
4. Choose username: "ump_test_12345_bot"
5. Copy the bot token
6. Add to .env:
   TELEGRAM_BOT_TOKEN=123456789:ABCdefGHIjklMNO...

PART B: Get Your Chat ID
-------------------------
1. Send a message to your bot in Telegram
2. Visit this URL in browser (replace YOUR_TOKEN):
   https://api.telegram.org/botYOUR_TOKEN/getUpdates

3. Look for "chat":{"id":123456789}
4. Copy that number (your chat ID)

PART C: Update Frontend Configuration
--------------------------------------
1. Open: public/messages.html
2. Find line 270:
   chatId: '123456789'
3. Replace with YOUR actual chat ID
4. Save the file

PART D: Test Sending (Web → Telegram)
--------------------------------------
1. Refresh messages.html
2. Select Telegram platform
3. Type: "Test from web"
4. Click Send
5. Check your Telegram bot - message should arrive

Expected in Browser Console:
✅ No errors
✅ Network tab shows POST to /api/send/telegram
✅ Response: {"success":true,"data":{...}}

Expected in Server Terminal:
(no error messages)

Expected in Telegram App:
📱 Your bot receives: "Test from web"

PART E: Test Receiving (Telegram → Web)
----------------------------------------
For testing without webhook (development):

Option 1: Manually insert test message to database
1. Open MongoDB Compass or mongosh
2. Insert into messages collection:
```json
{
  "user_id": "YOUR_USER_ID",
  "platform_name": "Telegram",
  "sender_name": "Test User",
  "content": "Hello from Telegram!",
  "message_type": "text",
  "timestamp": new Date()
}
```
3. Refresh messages.html
4. You should see the message

Option 2: Set up webhook (for real testing):
1. Install ngrok: https://ngrok.com/download
2. Run: ngrok http 5000
3. Copy the HTTPS URL (e.g., https://abc123.ngrok.io)
4. Set webhook:
   https://api.telegram.org/botYOUR_TOKEN/setWebhook?url=https://abc123.ngrok.io/webhook/telegram

5. Send message to your bot from Telegram app
6. Check server terminal for webhook logs
7. Refresh messages.html to see the message

================================================================================
CHECKING MESSAGES IN DATABASE
================================================================================

Using MongoDB Compass:
1. Connect to: mongodb://127.0.0.1:27017
2. Database: ump_project
3. Collection: messages
4. You should see documents like:
   {
     _id: ObjectId("..."),
     user_id: ObjectId("..."),
     platform_name: "Telegram",
     sender_name: "You" or "John Doe",
     content: "Hello!",
     message_type: "text",
     timestamp: 2025-10-07T10:30:00.000Z
   }

Using mongosh:
```
mongosh
use ump_project
db.messages.find().pretty()
```

To see only Telegram messages:
```
db.messages.find({platform_name: "Telegram"}).pretty()
```

To see messages for specific user:
```
db.messages.find({user_id: ObjectId("YOUR_USER_ID")}).pretty()
```

================================================================================
HOW TO UPDATE RECIPIENT IDS
================================================================================

All recipient IDs are in: public/messages.html

Lines to update:

Line 265 - WhatsApp:
recipientId: '919876543210'  // Your WhatsApp number with country code

Line 270 - Telegram:
chatId: '123456789'  // Your Telegram chat ID

Line 275 - Facebook:
recipientId: 'facebook-psid'  // Facebook Page-Scoped ID

Line 280 - Instagram:
recipientId: 'instagram-id'  // Instagram user ID

After updating, save and refresh your browser.

================================================================================
API ENDPOINTS REFERENCE
================================================================================

Get Messages by Platform:
GET http://localhost:5000/api/messages/:userId/:platform

Example:
GET http://localhost:5000/api/messages/65abc123.../telegram

Response:
[
  {
    "_id": "65xyz...",
    "user_id": "65abc...",
    "platform_name": "Telegram",
    "sender_name": "John",
    "content": "Hello!",
    "message_type": "text",
    "timestamp": "2025-10-07T10:30:00.000Z"
  },
  ...
]

Send Message:
POST http://localhost:5000/api/send/telegram
Body: {
  "chatId": "123456789",
  "message": "Hello!",
  "userId": "65abc123..."
}

Response:
{
  "success": true,
  "data": {
    "ok": true,
    "result": {...}
  }
}

================================================================================
TROUBLESHOOTING
================================================================================

ISSUE: "No messages yet" shows even though I sent messages
-----------------------------------------------------------
Solution:
1. Check browser console for errors
2. Verify userId is stored: localStorage.getItem('userId')
3. Check MongoDB - are messages saved?
4. Try clicking Refresh button
5. Check server terminal for errors

ISSUE: Sent messages don't appear in chat
------------------------------------------
Solution:
1. Check Network tab - is API call successful?
2. Look for green notification "Message sent"
3. Check MongoDB messages collection
4. Wait for auto-refresh (10 seconds) or click Refresh
5. Check if sender_name = "You" in database

ISSUE: Incoming messages from Telegram don't show
--------------------------------------------------
Solution:
1. Is webhook set up? Check with:
   https://api.telegram.org/botYOUR_TOKEN/getWebhookInfo

2. Check server terminal when you send message from Telegram
   Should see: "Telegram webhook received: ..."

3. If no webhook log: webhook not configured properly

4. If webhook received but not saved:
   Check server terminal for "Telegram message saved"

5. Check if message exists in MongoDB with correct user_id

ISSUE: Messages show but sender is wrong
-----------------------------------------
This is normal! For incoming messages:
- Webhook saves with actual sender name from platform
- For sent messages, sender_name = "You"

ISSUE: Auto-refresh not working
--------------------------------
Check browser console for errors during interval
Try manual refresh button
Check if you have multiple tabs open (may cause issues)

================================================================================
TESTING WITHOUT PLATFORM SETUP
================================================================================

If you don't want to set up all platforms yet, you can test with MongoDB:

1. Manually insert test messages:
```
use ump_project
db.messages.insertMany([
  {
    user_id: ObjectId("YOUR_USER_ID"),
    platform_name: "Telegram",
    sender_name: "Test Person",
    content: "Hello from test!",
    message_type: "text",
    timestamp: new Date()
  },
  {
    user_id: ObjectId("YOUR_USER_ID"),
    platform_name: "Telegram",
    sender_name: "You",
    content: "Reply message",
    message_type: "text",
    timestamp: new Date()
  }
])
```

2. Refresh messages.html
3. You should see both messages in proper chat format

This lets you test the UI without needing actual platform connections.

================================================================================
COMPLETE TESTING CHECKLIST
================================================================================

Basic Functionality:
[ ] Page loads without errors
[ ] Platform sections appear
[ ] Messages load from database
[ ] Chat interface looks correct
[ ] Sent messages align right (blue)
[ ] Received messages align left (white)
[ ] Timestamps display correctly
[ ] Refresh button works
[ ] Auto-refresh works (wait 10+ seconds)

Sending Messages:
[ ] Can type in input box
[ ] Send button works
[ ] Shows "Sending..." status
[ ] Success notification appears
[ ] Message appears in chat
[ ] Message saved to MongoDB
[ ] Message sent to platform (if configured)

Receiving Messages:
[ ] Webhook receives messages (check server logs)
[ ] Messages saved to database with correct user_id
[ ] Messages appear in chat after refresh
[ ] Sender name displays correctly
[ ] Timestamp is accurate

Multiple Platforms:
[ ] Can select multiple platforms
[ ] Each platform has separate section
[ ] Messages don't mix between platforms
[ ] Can send to each platform independently
[ ] Auto-refresh works for all platforms

================================================================================
NEXT STEPS FOR PRODUCTION
================================================================================

1. User Association:
   - Currently uses first user in database
   - Add platform connection with user mapping
   - Store chat IDs/recipient IDs in database per user

2. Real-time Updates:
   - Use WebSockets for instant message updates
   - No need to wait for 10-second auto-refresh

3. Rich Media:
   - Support images, videos, voice messages
   - Show media previews in chat
   - Download media files

4. Search & Filter:
   - Search messages by keyword
   - Filter by date range
   - Filter by platform

5. Notifications:
   - Browser notifications for new messages
   - Unread message count
   - Sound alerts

6. Multi-user Support:
   - Proper user authentication
   - Each user sees only their messages
   - Admin panel for managing users

================================================================================
                              END OF GUIDE
================================================================================

Version: 2.0
Last Updated: 2025-10-07

The messaging system now loads real messages from the database and displays
them in a proper chat interface. Follow the Telegram testing section for
complete step-by-step testing instructions.

For webhook setup to receive messages, use ngrok and refer to the
SOCIAL_MEDIA_INTEGRATION_GUIDE.txt file.

================================================================================
