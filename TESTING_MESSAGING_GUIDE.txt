================================================================================
                     MESSAGING INTEGRATION TESTING GUIDE
                      How to Test All Messaging Platforms
================================================================================

================================================================================
IMPORTANT: WHAT'S BEEN FIXED
================================================================================

The following issues have been resolved:

1. Messages now call real API endpoints (not just dummy data)
2. API routes added for all 4 platforms:
   - POST /api/send/whatsapp
   - POST /api/send/telegram
   - POST /api/send/facebook
   - POST /api/send/instagram

3. Frontend updated to:
   - Make actual API calls when clicking "Send"
   - Store userId in localStorage after login
   - Show success/error notifications
   - Display "Sending..." status while processing

4. All sent messages are saved to MongoDB messages collection

================================================================================
TESTING PREREQUISITES
================================================================================

Before testing, ensure you have:

1. MongoDB running (locally or Atlas)
2. Node.js server running: npm start
3. All API credentials configured in .env file
4. Webhooks set up for receiving messages (optional for sending)

================================================================================
STEP-BY-STEP TESTING PROCESS
================================================================================

STEP 1: Register and Login
---------------------------
1. Go to http://localhost:5000/register.html
2. Create a new account
3. Check your email for verification link
4. Click the verification link
5. Go to http://localhost:5000/login.html
6. Login with your credentials
7. You should be redirected to dashboard

STEP 2: Select Platforms
-------------------------
1. From dashboard, go to platform selection page
2. Select platforms you want to test (e.g., Telegram, WhatsApp)
3. Click "Proceed" or continue to messages

STEP 3: Test Sending Messages
------------------------------
1. Go to http://localhost:5000/messages.html
2. You should see the platforms you selected
3. Each platform shows a dummy conversation
4. Type a message in the reply box
5. Click "Send"
6. Watch for:
   - Button changes to "Sending..."
   - Notification appears (green for success, red for error)
   - If successful, message appears below
   - Message is saved to MongoDB

================================================================================
WHAT HAPPENS WHEN YOU CLICK SEND
================================================================================

Frontend (messages.html):
1. Captures your message text
2. Gets platform type (whatsapp, telegram, etc.)
3. Makes POST request to appropriate API endpoint
4. Shows "Sending..." status
5. Waits for response
6. Shows success/error notification
7. Displays message if successful

Backend (server.js):
1. Receives API request
2. Calls platform-specific integration function
3. Sends message via platform API (WhatsApp, Telegram, etc.)
4. Saves message to MongoDB messages collection
5. Returns success/error response

================================================================================
TESTING EACH PLATFORM
================================================================================

TELEGRAM TESTING
----------------

Setup Required:
1. Create bot with @BotFather (get bot token)
2. Add token to .env:
   TELEGRAM_BOT_TOKEN=your-bot-token

3. Get your Chat ID:
   - Send a message to your bot
   - Visit: https://api.telegram.org/bot<YOUR_TOKEN>/getUpdates
   - Find "chat":{"id": YOUR_CHAT_ID}

4. Update messages.html line 229:
   chatId: 'YOUR_ACTUAL_CHAT_ID'

Testing:
1. Select Telegram in platform selection
2. Go to messages.html
3. Type a message in Telegram section
4. Click Send
5. Check:
   - Browser console for any errors
   - Server terminal for send logs
   - Your Telegram bot should receive the message
   - MongoDB messages collection should have the entry

Expected Result:
‚úÖ Message appears in your Telegram bot chat
‚úÖ Success notification shows in browser
‚úÖ Message saved to MongoDB

Common Issues:
‚ùå Bot token invalid ‚Üí Check .env file
‚ùå Chat ID wrong ‚Üí Get correct chat ID from getUpdates
‚ùå "Error sending message" ‚Üí Check server logs for details


WHATSAPP TESTING
----------------

Setup Required:
1. Set up WhatsApp Business API (see SOCIAL_MEDIA_INTEGRATION_GUIDE.txt)
2. Get Phone Number ID and Access Token
3. Add to .env:
   WHATSAPP_PHONE_NUMBER_ID=your-phone-id
   WHATSAPP_ACCESS_TOKEN=your-access-token

4. Update messages.html line 223:
   recipientId: 'RECIPIENT_PHONE_WITH_COUNTRY_CODE'
   Example: '919876543210' for India

Testing:
1. Select WhatsApp in platform selection
2. Go to messages.html
3. Type a message
4. Click Send
5. Check:
   - Recipient's WhatsApp should receive message
   - Browser shows success notification
   - MongoDB has the message

Expected Result:
‚úÖ Message delivered to WhatsApp number
‚úÖ Success notification
‚úÖ Saved to database

Common Issues:
‚ùå "Invalid phone number" ‚Üí Use format: country code + number
‚ùå Access token expired ‚Üí Generate new token
‚ùå Phone number not registered ‚Üí Use test numbers from Meta dashboard


FACEBOOK MESSENGER TESTING
---------------------------

Setup Required:
1. Create Facebook page and app
2. Get Page Access Token
3. Add to .env:
   FACEBOOK_PAGE_ACCESS_TOKEN=your-token

4. Get recipient's PSID (Page-Scoped ID):
   - Have someone message your page
   - Check webhook data or use Graph API

5. Update messages.html line 235:
   recipientId: 'RECIPIENT_PSID'

Testing:
1. Select Facebook in platform selection
2. Go to messages.html
3. Type and send message
4. Check recipient's Messenger

Expected Result:
‚úÖ Message appears in Messenger
‚úÖ Success notification
‚úÖ Database entry created

Common Issues:
‚ùå Token invalid ‚Üí Regenerate page token
‚ùå PSID wrong ‚Üí Get correct PSID from page messages
‚ùå App not approved ‚Üí Use test users in development mode


INSTAGRAM TESTING
-----------------

Setup Required:
1. Convert to Instagram Business account
2. Link to Facebook page
3. Get access token with instagram_manage_messages permission
4. Add to .env:
   INSTAGRAM_ACCESS_TOKEN=your-token

5. Get recipient ID (Instagram user ID)
6. Update messages.html line 241:
   recipientId: 'RECIPIENT_INSTAGRAM_ID'

Testing:
Same process as Facebook

Expected Result:
‚úÖ DM sent on Instagram
‚úÖ Success notification
‚úÖ Message in database

Common Issues:
‚ùå Not business account ‚Üí Convert in Instagram settings
‚ùå Not linked to page ‚Üí Connect in Instagram settings
‚ùå Permissions missing ‚Üí Add instagram_manage_messages

================================================================================
HOW TO VIEW API CALLS IN BROWSER
================================================================================

1. Open browser DevTools (F12)
2. Go to Network tab
3. Click Send on any platform
4. Look for POST request to /api/send/...
5. Click on it to see:
   - Request payload (your message)
   - Response data (success/error)
   - Status code (200 = success, 500 = error)

Example successful response:
{
  "success": true,
  "data": {
    "message_id": "wamid.xxxxx"
  }
}

Example error response:
{
  "success": false,
  "error": "Invalid access token"
}

================================================================================
HOW TO CHECK MESSAGES IN MONGODB
================================================================================

Using MongoDB Compass:
1. Open MongoDB Compass
2. Connect to: mongodb://127.0.0.1:27017
3. Select database: ump_project
4. Open collection: messages
5. You should see all sent/received messages

Using mongosh (command line):
```
mongosh
use ump_project
db.messages.find().pretty()
```

Each message document has:
- user_id: The user who sent it
- platform_name: WhatsApp, Telegram, etc.
- sender_name: "You" for sent messages
- content: The message text
- message_type: text, image, video, audio
- timestamp: When it was sent

================================================================================
HOW TO CHECK SERVER LOGS
================================================================================

In your terminal where server is running, you'll see:

Successful send:
‚úÖ MongoDB Connected
üöÄ Server running at: http://localhost:5000
(no errors)

Failed send:
Telegram send error: [Error details]
or
WhatsApp send error: [Error details]

Look for these patterns:
- "send error" = Problem with platform API
- "Server error" = Problem with your code
- "ECONNREFUSED" = MongoDB not running
- "401" / "403" = Invalid credentials

================================================================================
RECEIVING MESSAGES FROM PLATFORMS
================================================================================

To receive incoming messages (not just send):

1. Your server must be publicly accessible:
   - Use ngrok for local testing
   - Or deploy to cloud (Heroku, AWS, etc.)

2. Set up webhooks for each platform:
   - WhatsApp: Point to https://your-domain/webhook/whatsapp
   - Telegram: Set webhook to https://your-domain/webhook/telegram
   - Facebook: Point to https://your-domain/webhook/facebook
   - Instagram: Point to https://your-domain/webhook/instagram

3. When someone sends you a message:
   - Platform calls your webhook
   - Your server parses the message
   - Saves to MongoDB messages collection
   - You can view in inbox

See SOCIAL_MEDIA_INTEGRATION_GUIDE.txt for webhook setup details.

================================================================================
UPDATING RECIPIENT IDS FOR TESTING
================================================================================

To test with real recipients, update these lines in messages.html:

Line 223 (WhatsApp):
recipientId: '919876543210' // Your test phone number

Line 229 (Telegram):
chatId: '123456789' // Your chat ID from getUpdates

Line 235 (Facebook):
recipientId: 'facebook-user-psid' // Recipient's PSID

Line 241 (Instagram):
recipientId: 'instagram-user-id' // Recipient's IG ID

Save the file and refresh your browser.

================================================================================
QUICK DEBUGGING CHECKLIST
================================================================================

If sending fails, check in this order:

[ ] Is MongoDB running?
    Run: mongosh (should connect)

[ ] Is server running?
    Check terminal for "Server running at..."

[ ] Are API credentials in .env?
    Open .env and verify all tokens are set

[ ] Is the .env file being loaded?
    Add console.log(process.env.TELEGRAM_BOT_TOKEN) in server.js

[ ] Are recipient IDs correct?
    Check messages.html lines 223, 229, 235, 241

[ ] Is the API endpoint being called?
    Check browser Network tab in DevTools

[ ] What's the error message?
    Check browser console and server terminal

[ ] Is the token expired?
    Most tokens expire after 60-90 days

[ ] Are you testing in development mode?
    Facebook/Instagram: Use test users
    WhatsApp: Use test numbers from Meta dashboard

================================================================================
TESTING WITHOUT ACTUAL PLATFORM SETUP
================================================================================

If you want to test the API flow without setting up platforms:

1. Comment out the actual API call in server.js
2. Return a mock success response

Example for Telegram (server.js line 395):

Replace:
const result = await sendTelegramMessage(chatId, message);

With:
// const result = await sendTelegramMessage(chatId, message);
const result = { ok: true, message_id: 123 }; // Mock response

This will:
‚úÖ Let you test the API flow
‚úÖ Save messages to database
‚úÖ Show success notifications
‚ùå But won't actually send messages to platforms

Useful for testing the UI and database integration without platform credentials.

================================================================================
PRODUCTION TESTING CHECKLIST
================================================================================

Before deploying:

[ ] All platforms tested with real messages
[ ] Webhooks configured and tested
[ ] All messages saving to database correctly
[ ] Error handling working (show proper error messages)
[ ] Rate limiting implemented (avoid API spam)
[ ] Access tokens are permanent (not temporary)
[ ] Environment variables set on hosting platform
[ ] Database is production MongoDB Atlas (not local)
[ ] SSL/HTTPS enabled
[ ] CORS configured properly
[ ] Logging set up for monitoring
[ ] Backup system for database

================================================================================
SUPPORT RESOURCES
================================================================================

If you get stuck:

1. Check browser console (F12 ‚Üí Console)
2. Check server terminal logs
3. Check MongoDB for saved messages
4. Review .env configuration
5. Test API endpoints with Postman
6. Check platform-specific documentation:
   - Telegram: https://core.telegram.org/bots/api
   - WhatsApp: https://developers.facebook.com/docs/whatsapp
   - Facebook: https://developers.facebook.com/docs/messenger-platform
   - Instagram: https://developers.facebook.com/docs/messenger-platform/instagram

7. Review SOCIAL_MEDIA_INTEGRATION_GUIDE.txt

================================================================================
                              END OF GUIDE
================================================================================

Version: 1.0
Last Updated: 2025-10-07

This guide explains how to test all messaging functionality after the fixes.
The API integration is now working - you just need to configure your platform
credentials and recipient IDs to test with real messages.

================================================================================
